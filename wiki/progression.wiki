#summary One-sentence summary of this page.

= Introduction =

Ce projet est réalisé par des étudiants pour une majeur en conception de jeux vidéos à l'Université du Québec À Chicoutimi (UQAC).<br>
La date d'échéance de ce projet est avant le *25 avril 2012*.


= Description du Projet =

Comme projet, nous avons pensé à réaliser un jeu vidéo de tir multidirectionnel où le joueur doit  survivre à une invasion de morts-vivants. Le but du jeu est d’éliminer tous les morts-vivants dans un niveau fixe. Plus le joueur réussit de niveaux, plus le niveau de difficulté augmente. Par exemple, lors de la progression, il y a de nouveaux morts-vivants avec des pouvoirs différents et il y en a davantage par niveau. Le joueur peut acquérir de nouvelles armes pour augmenter ses chances de survie dans chaque niveau. De plus, nous avons pensé à intégrer la possibilité de jouer en coopération avec des amis dans notre jeu en réseau, cependant le jeu étant d’une grande ampleur, il est possible que cette fonctionnalité ne soit pas réalisé.

= Hello World... Tout à un commencement = 

Puisque nous commençons dans l'univers du jeu vidéo, il va de soit que des tests seront effectués. Tout d'abord, nos premiers tests constituent un élément de familiarisation avec XNA Game Studio.
<br/>
Voici les tests qui ont été effectué:
  * Faire afficher une chaîne de caractère à l'écran et l'animé pour que ce ne soit pas que du texte brute;
  * Faire affichier des sprites et les faire bouger sur la fenêtre de jeu;
  * Prochaine étape: Animé les sprites à l'aide de SpriteSheet.

= La structure du programme = 

Pour le bon fonctionnement du programme, une bonne analyse doit être faite. Avec le peu de développement que nous avons effectués, nous avons réalisé le diagramme de classe. Ce diagramme à été conçu avec le peu d'expérience dans XNA que l'équipe dispose. Cependant, les données à conservé au niveau des objets est du pareil au même peu importe le langage de programmation.
<br />
Le diagramme de classe est disponible à l'adresse suivante: <a href="http://dl.dropbox.com/u/15342998/The_Apocalypse.vsd">lien</a>

= L'envoie de projectile (Principe) =

Le X permet de savoir où le joueur regarde.(Gauche/Droite)
X Positif : Regarde à droite
X Négatif: Regarde à gauche
<br />
Le Y permet de savoir où le joueur regarde (Haut/Bas)
Y Positif: Regarde en bas
Y Négatif: Regarde en haut
<br />
Ne pas oublier qu'en programmation le Y pointe vers le bas!
<br />
La formule est nul autre que Y = MX
<br />
Le M est calculable en effectuant la division suivante:
<br />
M = (Mouse_Y - Player_Y)/(Mouse_X - Player_X)
<br />
La variable X est le temps de jeu diviser par l'intervalle de vitesse auquel on veut que la balle soit.
*Ce n'est pas des vrais méthodes!!! Cependant le principe reste le même*
<br />
DepartBalle = gametime.getTime();
<br />
X = (gametime.getTime()-DepartBalleinterval) + Player_X;
<br />
Lors du lancement de la balle le joueur peu etre en mouvement. Il faut donc enregistré toute les données modifiable par le joueur, tel que Player_X, Player_Y, Mouse_X, Mouse_Y.
<br />
Sauvegarder aussi le M pour ne pas avoir a recalculer la pente à chaque fois. Seul le X et le Y devrait être modifier selon le temps qui s'est écoulé en jeu.
<br />
Cependant... Puisque la balle va avec le temps de jeu. Il se peu qu'elle passe des pixels et il ne faut pas que cela arrive! Si j'ai un zombie en 1,1 et que je passe de 0,0 à 2,2... Je n'ai pas tuer le zombie mais il était dans ma trajectoire.
<br />
il faut donc que pour chaque X E N tant que N <= client.size.X.width
et donc le temps ne servirait qu'a ralentir l'exécution de la balle et donc pour le X tout change!
<br />
if(gametime.getTime()-100 >= UpdatePosition)
{
UpdatePosition = gametime.getTime();
x++;
}
<br />
La balle va donc avancer de 1 pixel à toute les 100 millisecondes soit... 10 pixel/seconde... Il faudrait reduire le temps un peu mais cela reste un principe.